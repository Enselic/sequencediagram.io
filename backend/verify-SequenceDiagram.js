/* DO NOT EDIT THIS FILE DIRECTLY, IT IS AUTO-GENERATED BY regenerate-verify-SequenceDiagram.js!!! */
"use strict";
var validate = (function () {
  var pattern0 = new RegExp("^o[0-9]+$");
  var pattern1 = new RegExp("^m[0-9]+$");
  var refVal = [];
  var refVal1 = (function () {
    var pattern0 = new RegExp("^o[0-9]+$");
    var pattern1 = new RegExp("^m[0-9]+$");
    return function validate(
      data,
      dataPath,
      parentData,
      parentDataProperty,
      rootData
    ) {
      "use strict";
      var vErrors = null;
      var errors = 0;
      if (data && typeof data === "object" && !Array.isArray(data)) {
        if (true) {
          var errs__0 = errors;
          var valid1 = true;
          for (var key0 in data) {
            var isAdditional0 = !(false || key0 == "id" || key0 == "name");
            if (isAdditional0) {
              valid1 = false;
              validate.errors = [
                {
                  keyword: "additionalProperties",
                  dataPath: (dataPath || "") + "",
                  schemaPath: "#/additionalProperties",
                  params: {
                    additionalProperty: "" + key0 + "",
                  },
                  message: "should NOT have additional properties",
                },
              ];
              return false;
              break;
            }
          }
          if (valid1) {
            var data1 = data.id;
            if (data1 === undefined) {
              valid1 = false;
              validate.errors = [
                {
                  keyword: "required",
                  dataPath: (dataPath || "") + "",
                  schemaPath: "#/required",
                  params: {
                    missingProperty: "id",
                  },
                  message: "should have required property 'id'",
                },
              ];
              return false;
            } else {
              var errs_1 = errors;
              var errs_2 = errors;
              if (typeof data1 === "string") {
                if (!pattern0.test(data1)) {
                  validate.errors = [
                    {
                      keyword: "pattern",
                      dataPath: (dataPath || "") + ".id",
                      schemaPath: "#/definitions/ObjectId/pattern",
                      params: {
                        pattern: "^o[0-9]+$",
                      },
                      message: 'should match pattern "^o[0-9]+$"',
                    },
                  ];
                  return false;
                }
              } else {
                validate.errors = [
                  {
                    keyword: "type",
                    dataPath: (dataPath || "") + ".id",
                    schemaPath: "#/definitions/ObjectId/type",
                    params: {
                      type: "string",
                    },
                    message: "should be string",
                  },
                ];
                return false;
              }
              var valid2 = errors === errs_2;
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              if (data.name === undefined) {
                valid1 = false;
                validate.errors = [
                  {
                    keyword: "required",
                    dataPath: (dataPath || "") + "",
                    schemaPath: "#/required",
                    params: {
                      missingProperty: "name",
                    },
                    message: "should have required property 'name'",
                  },
                ];
                return false;
              } else {
                var errs_1 = errors;
                if (typeof data.name !== "string") {
                  validate.errors = [
                    {
                      keyword: "type",
                      dataPath: (dataPath || "") + ".name",
                      schemaPath: "#/properties/name/type",
                      params: {
                        type: "string",
                      },
                      message: "should be string",
                    },
                  ];
                  return false;
                }
                var valid1 = errors === errs_1;
              }
            }
          }
        }
      } else {
        validate.errors = [
          {
            keyword: "type",
            dataPath: (dataPath || "") + "",
            schemaPath: "#/type",
            params: {
              type: "object",
            },
            message: "should be object",
          },
        ];
        return false;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal1.schema = {
    type: "object",
    required: ["id", "name"],
    additionalProperties: false,
    properties: {
      id: {
        $ref: "#/definitions/ObjectId",
      },
      name: {
        type: "string",
      },
    },
  };
  refVal1.errors = null;
  refVal[1] = refVal1;
  var refVal2 = {
    type: "string",
    pattern: "^o[0-9]+$",
  };
  refVal[2] = refVal2;
  var refVal3 = (function () {
    var pattern0 = new RegExp("^o[0-9]+$");
    var pattern1 = new RegExp("^m[0-9]+$");
    return function validate(
      data,
      dataPath,
      parentData,
      parentDataProperty,
      rootData
    ) {
      "use strict";
      var vErrors = null;
      var errors = 0;
      if (data && typeof data === "object" && !Array.isArray(data)) {
        if (true) {
          var errs__0 = errors;
          var valid1 = true;
          for (var key0 in data) {
            var isAdditional0 = !(false || validate.schema.properties[key0]);
            if (isAdditional0) {
              valid1 = false;
              validate.errors = [
                {
                  keyword: "additionalProperties",
                  dataPath: (dataPath || "") + "",
                  schemaPath: "#/additionalProperties",
                  params: {
                    additionalProperty: "" + key0 + "",
                  },
                  message: "should NOT have additional properties",
                },
              ];
              return false;
              break;
            }
          }
          if (valid1) {
            var data1 = data.id;
            if (data1 === undefined) {
              valid1 = false;
              validate.errors = [
                {
                  keyword: "required",
                  dataPath: (dataPath || "") + "",
                  schemaPath: "#/required",
                  params: {
                    missingProperty: "id",
                  },
                  message: "should have required property 'id'",
                },
              ];
              return false;
            } else {
              var errs_1 = errors;
              var errs_2 = errors;
              if (typeof data1 === "string") {
                if (!pattern1.test(data1)) {
                  validate.errors = [
                    {
                      keyword: "pattern",
                      dataPath: (dataPath || "") + ".id",
                      schemaPath: "#/definitions/MessageId/pattern",
                      params: {
                        pattern: "^m[0-9]+$",
                      },
                      message: 'should match pattern "^m[0-9]+$"',
                    },
                  ];
                  return false;
                }
              } else {
                validate.errors = [
                  {
                    keyword: "type",
                    dataPath: (dataPath || "") + ".id",
                    schemaPath: "#/definitions/MessageId/type",
                    params: {
                      type: "string",
                    },
                    message: "should be string",
                  },
                ];
                return false;
              }
              var valid2 = errors === errs_2;
              var valid1 = errors === errs_1;
            }
            if (valid1) {
              if (data.name === undefined) {
                valid1 = false;
                validate.errors = [
                  {
                    keyword: "required",
                    dataPath: (dataPath || "") + "",
                    schemaPath: "#/required",
                    params: {
                      missingProperty: "name",
                    },
                    message: "should have required property 'name'",
                  },
                ];
                return false;
              } else {
                var errs_1 = errors;
                if (typeof data.name !== "string") {
                  validate.errors = [
                    {
                      keyword: "type",
                      dataPath: (dataPath || "") + ".name",
                      schemaPath: "#/properties/name/type",
                      params: {
                        type: "string",
                      },
                      message: "should be string",
                    },
                  ];
                  return false;
                }
                var valid1 = errors === errs_1;
              }
              if (valid1) {
                var data1 = data.sender;
                if (data1 === undefined) {
                  valid1 = false;
                  validate.errors = [
                    {
                      keyword: "required",
                      dataPath: (dataPath || "") + "",
                      schemaPath: "#/required",
                      params: {
                        missingProperty: "sender",
                      },
                      message: "should have required property 'sender'",
                    },
                  ];
                  return false;
                } else {
                  var errs_1 = errors;
                  var errs_2 = errors;
                  if (typeof data1 === "string") {
                    if (!pattern0.test(data1)) {
                      validate.errors = [
                        {
                          keyword: "pattern",
                          dataPath: (dataPath || "") + ".sender",
                          schemaPath: "#/definitions/ObjectId/pattern",
                          params: {
                            pattern: "^o[0-9]+$",
                          },
                          message: 'should match pattern "^o[0-9]+$"',
                        },
                      ];
                      return false;
                    }
                  } else {
                    validate.errors = [
                      {
                        keyword: "type",
                        dataPath: (dataPath || "") + ".sender",
                        schemaPath: "#/definitions/ObjectId/type",
                        params: {
                          type: "string",
                        },
                        message: "should be string",
                      },
                    ];
                    return false;
                  }
                  var valid2 = errors === errs_2;
                  var valid1 = errors === errs_1;
                }
                if (valid1) {
                  var data1 = data.receiver;
                  if (data1 === undefined) {
                    valid1 = false;
                    validate.errors = [
                      {
                        keyword: "required",
                        dataPath: (dataPath || "") + "",
                        schemaPath: "#/required",
                        params: {
                          missingProperty: "receiver",
                        },
                        message: "should have required property 'receiver'",
                      },
                    ];
                    return false;
                  } else {
                    var errs_1 = errors;
                    var errs_2 = errors;
                    if (typeof data1 === "string") {
                      if (!pattern0.test(data1)) {
                        validate.errors = [
                          {
                            keyword: "pattern",
                            dataPath: (dataPath || "") + ".receiver",
                            schemaPath: "#/definitions/ObjectId/pattern",
                            params: {
                              pattern: "^o[0-9]+$",
                            },
                            message: 'should match pattern "^o[0-9]+$"',
                          },
                        ];
                        return false;
                      }
                    } else {
                      validate.errors = [
                        {
                          keyword: "type",
                          dataPath: (dataPath || "") + ".receiver",
                          schemaPath: "#/definitions/ObjectId/type",
                          params: {
                            type: "string",
                          },
                          message: "should be string",
                        },
                      ];
                      return false;
                    }
                    var valid2 = errors === errs_2;
                    var valid1 = errors === errs_1;
                  }
                  if (valid1) {
                    if (data.isAsync === undefined) {
                      valid1 = true;
                    } else {
                      var errs_1 = errors;
                      if (typeof data.isAsync !== "boolean") {
                        validate.errors = [
                          {
                            keyword: "type",
                            dataPath: (dataPath || "") + ".isAsync",
                            schemaPath: "#/properties/isAsync/type",
                            params: {
                              type: "boolean",
                            },
                            message: "should be boolean",
                          },
                        ];
                        return false;
                      }
                      var valid1 = errors === errs_1;
                    }
                    if (valid1) {
                      if (data.isReply === undefined) {
                        valid1 = true;
                      } else {
                        var errs_1 = errors;
                        if (typeof data.isReply !== "boolean") {
                          validate.errors = [
                            {
                              keyword: "type",
                              dataPath: (dataPath || "") + ".isReply",
                              schemaPath: "#/properties/isReply/type",
                              params: {
                                type: "boolean",
                              },
                              message: "should be boolean",
                            },
                          ];
                          return false;
                        }
                        var valid1 = errors === errs_1;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        validate.errors = [
          {
            keyword: "type",
            dataPath: (dataPath || "") + "",
            schemaPath: "#/type",
            params: {
              type: "object",
            },
            message: "should be object",
          },
        ];
        return false;
      }
      validate.errors = vErrors;
      return errors === 0;
    };
  })();
  refVal3.schema = {
    type: "object",
    required: ["id", "sender", "receiver", "name"],
    additionalProperties: false,
    properties: {
      id: {
        $ref: "#/definitions/MessageId",
      },
      name: {
        type: "string",
      },
      sender: {
        $ref: "#/definitions/ObjectId",
      },
      receiver: {
        $ref: "#/definitions/ObjectId",
      },
      isAsync: {
        type: "boolean",
      },
      isReply: {
        type: "boolean",
      },
    },
  };
  refVal3.errors = null;
  refVal[3] = refVal3;
  var refVal4 = {
    type: "string",
    pattern: "^m[0-9]+$",
  };
  refVal[4] = refVal4;
  return function validate(
    data,
    dataPath,
    parentData,
    parentDataProperty,
    rootData
  ) {
    "use strict";
    var vErrors = null;
    var errors = 0;
    if (rootData === undefined) rootData = data;
    if (data && typeof data === "object" && !Array.isArray(data)) {
      if (true) {
        var errs__0 = errors;
        var valid1 = true;
        for (var key0 in data) {
          var isAdditional0 = !(
            false ||
            key0 == "objects" ||
            key0 == "messages"
          );
          if (isAdditional0) {
            valid1 = false;
            validate.errors = [
              {
                keyword: "additionalProperties",
                dataPath: (dataPath || "") + "",
                schemaPath: "#/additionalProperties",
                params: {
                  additionalProperty: "" + key0 + "",
                },
                message: "should NOT have additional properties",
              },
            ];
            return false;
            break;
          }
        }
        if (valid1) {
          var data1 = data.objects;
          if (data1 === undefined) {
            valid1 = false;
            validate.errors = [
              {
                keyword: "required",
                dataPath: (dataPath || "") + "",
                schemaPath: "#/required",
                params: {
                  missingProperty: "objects",
                },
                message: "should have required property 'objects'",
              },
            ];
            return false;
          } else {
            var errs_1 = errors;
            if (Array.isArray(data1)) {
              var errs__1 = errors;
              var valid1;
              for (var i1 = 0; i1 < data1.length; i1++) {
                var errs_2 = errors;
                if (
                  !refVal1(
                    data1[i1],
                    (dataPath || "") + ".objects[" + i1 + "]",
                    data1,
                    i1,
                    rootData
                  )
                ) {
                  if (vErrors === null) vErrors = refVal1.errors;
                  else vErrors = vErrors.concat(refVal1.errors);
                  errors = vErrors.length;
                }
                var valid2 = errors === errs_2;
                if (!valid2) break;
              }
            } else {
              validate.errors = [
                {
                  keyword: "type",
                  dataPath: (dataPath || "") + ".objects",
                  schemaPath: "#/properties/objects/type",
                  params: {
                    type: "array",
                  },
                  message: "should be array",
                },
              ];
              return false;
            }
            var valid1 = errors === errs_1;
          }
          if (valid1) {
            var data1 = data.messages;
            if (data1 === undefined) {
              valid1 = false;
              validate.errors = [
                {
                  keyword: "required",
                  dataPath: (dataPath || "") + "",
                  schemaPath: "#/required",
                  params: {
                    missingProperty: "messages",
                  },
                  message: "should have required property 'messages'",
                },
              ];
              return false;
            } else {
              var errs_1 = errors;
              if (Array.isArray(data1)) {
                var errs__1 = errors;
                var valid1;
                for (var i1 = 0; i1 < data1.length; i1++) {
                  var errs_2 = errors;
                  if (
                    !refVal3(
                      data1[i1],
                      (dataPath || "") + ".messages[" + i1 + "]",
                      data1,
                      i1,
                      rootData
                    )
                  ) {
                    if (vErrors === null) vErrors = refVal3.errors;
                    else vErrors = vErrors.concat(refVal3.errors);
                    errors = vErrors.length;
                  }
                  var valid2 = errors === errs_2;
                  if (!valid2) break;
                }
              } else {
                validate.errors = [
                  {
                    keyword: "type",
                    dataPath: (dataPath || "") + ".messages",
                    schemaPath: "#/properties/messages/type",
                    params: {
                      type: "array",
                    },
                    message: "should be array",
                  },
                ];
                return false;
              }
              var valid1 = errors === errs_1;
            }
          }
        }
      }
    } else {
      validate.errors = [
        {
          keyword: "type",
          dataPath: (dataPath || "") + "",
          schemaPath: "#/type",
          params: {
            type: "object",
          },
          message: "should be object",
        },
      ];
      return false;
    }
    validate.errors = vErrors;
    return errors === 0;
  };
})();
validate.schema = {
  type: "object",
  required: ["messages", "objects"],
  additionalProperties: false,
  properties: {
    objects: {
      type: "array",
      items: {
        $ref: "#/definitions/Object",
      },
    },
    messages: {
      type: "array",
      items: {
        $ref: "#/definitions/Message",
      },
    },
  },
  definitions: {
    Empty: {
      type: "object",
    },
    ObjectId: {
      type: "string",
      pattern: "^o[0-9]+$",
    },
    MessageId: {
      type: "string",
      pattern: "^m[0-9]+$",
    },
    Object: {
      type: "object",
      required: ["id", "name"],
      additionalProperties: false,
      properties: {
        id: {
          $ref: "#/definitions/ObjectId",
        },
        name: {
          type: "string",
        },
      },
    },
    Message: {
      type: "object",
      required: ["id", "sender", "receiver", "name"],
      additionalProperties: false,
      properties: {
        id: {
          $ref: "#/definitions/MessageId",
        },
        name: {
          type: "string",
        },
        sender: {
          $ref: "#/definitions/ObjectId",
        },
        receiver: {
          $ref: "#/definitions/ObjectId",
        },
        isAsync: {
          type: "boolean",
        },
        isReply: {
          type: "boolean",
        },
      },
    },
    SequenceDiagram: {
      type: "object",
      required: ["messages", "objects"],
      additionalProperties: false,
      properties: {
        objects: {
          type: "array",
          items: {
            $ref: "#/definitions/Object",
          },
        },
        messages: {
          type: "array",
          items: {
            $ref: "#/definitions/Message",
          },
        },
      },
    },
    SequenceDiagramResponse: {
      type: "object",
      required: ["id", "revision", "sequenceDiagram", "creationTimeUtc"],
      additionalProperties: false,
      properties: {
        id: {
          type: "string",
        },
        revision: {
          type: "integer",
        },
        sequenceDiagram: {
          $ref: "#/definitions/SequenceDiagram",
        },
        creationTimeUtc: {
          type: "integer",
        },
      },
    },
  },
};
validate.errors = null;
module.exports = validate;
